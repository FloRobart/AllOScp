faire des optionPane et des colorChooser personnaliser pour permettre de leur appliquer le thème et le language.
faire un système de taille pour l'appli entière.
ajouter le thème et le langage "système" qui prendra les infos du système.

faire en sorte de générer qu'un seul étage de l'arborescence à la fois pour optimiser.

faire attention au survole de la sourie sur l'arbo, ça change le fichier choisie au moment du clique droit.

// pour le rennomage
//this.getCellEditor().getCellEditorValue();


faire ne sorte de pouvoir copier tout les fichier d'un dossier (methode copyFilesInFolder() dans la metier)


faire un system de zoom pour grossir ou retressir les icones et les textes
peut etre faire un fichier defaultValue.xml pour les paramètre par défaut de l'appli (thème, langue, taille)




/* Fonctionnalitées dans le panelFonctionGlobal */
/*========================================================================================*/
Comparer séléction (Fichier et dossier)
Comparer toute l'arborescence (racine et sous dossier)

Syncroniser séléction de l'arborescence A vers B (Fichier et dossier)
Syncroniser séléction de l'arborescence B vers A (Fichier et dossier)
Syncroniser séléction dans les deux sens (Fichier et dossier)

Syncroniser toute l'arborescence de A vers B (racine et sous dossier)
Syncroniser toute l'arborescence de B vers A (racine et sous dossier)
Syncroniser toute l'arborescence dans les deux sens (racine et sous dossier)

Syncroniser tout en arrière plan (racine et sous dossier)




/* Aide */
/*========================================================================================*/
Files.copy(Path, Path, StandardCopyOption); --> copie le contenue d'un fichier dans un autre fichier (StandardCopyOption.REPLACE_EXISTING pour remplacer le fichier si il existe déjà)
Files.createDirectories(Path);              --> créer un nouveau dossier ainsi que tous les parents inexistant
Files.createFile(Path);                     --> créer un nouveau fichier
Files.delete(Path);                         --> supprimer un fichier
Files.readAllBytes(Path);                   --> lire le contenue d'un fichier byte par byte (vas permettre de comparer les fichiers)

Files.walk(Path);                           --> parcourir un dossier et ses sous dossier
Files.walk(Path, int);                      --> parcourir un dossier et ses sous dossier jusqu'à un certain niveau
Files.walk(Path, int, FileVisitOption);     --> parcourir un dossier et ses sous dossier jusqu'à un certain niveau avec des options (FileVisitOption.FOLLOW_LINKS pour suivre les liens symbolique)

Files.walkFileTree(Path, FileVisitor);      --> parcourir un dossier et ses sous dossier avec un FileVisitor
Files.walkFileTree(Path, Set<FileVisitOption>, int, FileVisitor); --> parcourir un dossier et ses sous dossier avec un FileVisitor et des options (FileVisitOption.FOLLOW_LINKS pour suivre les liens symbolique)

/*========================================================================================*/
java.util.zip.*;                            --> permet d'analyser les fichiers zip
java.util.jar.*;                            --> permet d'analyser les fichiers jar
java.nio.FileSystem;                        --> ??? util pour les zips
java.nio.FileSystems;                       --> que des methodes static qui renvoie des FileSystem
java.io.fileDescriptor;                     --> ???

/*========================================================================================*/
java.util.ConcurrentHashMap<K,​V>;          --> permet de créer une map thread safe